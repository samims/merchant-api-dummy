// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/samims/merchant-api/app/models"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// MerchantRepoMock is an autogenerated mock type for the MerchantRepo type
type MerchantRepoMock struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *MerchantRepoMock) Delete(_a0 context.Context, _a1 models.Merchant) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Merchant) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOne provides a mock function with given fields: _a0, _a1
func (_m *MerchantRepoMock) FindOne(_a0 context.Context, _a1 models.Merchant) (*models.Merchant, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *models.Merchant
	if rf, ok := ret.Get(0).(func(context.Context, models.Merchant) *models.Merchant); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Merchant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Merchant) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: _a0
func (_m *MerchantRepoMock) GetAll(_a0 context.Context) ([]models.Merchant, error) {
	ret := _m.Called(_a0)

	var r0 []models.Merchant
	if rf, ok := ret.Get(0).(func(context.Context) []models.Merchant); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Merchant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0, _a1
func (_m *MerchantRepoMock) Save(_a0 context.Context, _a1 *models.Merchant) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Merchant) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0, _a1, _a2
func (_m *MerchantRepoMock) Update(_a0 context.Context, _a1 *models.Merchant, _a2 []string) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Merchant, []string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMerchantRepoMock creates a new instance of MerchantRepoMock. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMerchantRepoMock(t testing.TB) *MerchantRepoMock {
	mock := &MerchantRepoMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
